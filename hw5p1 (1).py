# -*- coding: utf-8 -*-
"""HW5P1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YvXB1h4aIMka089u-PJPtEMenk3se7rx
"""

# EECS 545 FA21 HW5 - Kernel Logistic Regression
import numpy as np 
from sklearn.metrics.pairwise import rbf_kernel, linear_kernel
from sklearn.linear_model import LogisticRegression

def linear_logistic_regression(x_train, y_train, x_test, y_test, step_size, reg_strength, num_iters):
  # only use sklearn's LogisticRegression
  clf = LogisticRegression(C = 1 / reg_strength)
  clf.fit(x_train, y_train)
  test_acc = clf.score(x_test, y_test)
  return test_acc

def kernel_logistic_regression(x_train, y_train, x_test, y_test, step_size, reg_strength, num_iters, kernel_parameter):

  ini_b = 0
  n_train = x_train.shape[0]
  y_train = y_train.reshape(n_train, 1)
  


  alpha = np.zeros((n_train, 1))

  result = np.zeros((n_train, 1))

  
  for iter in range(num_iters):
    for i in range(n_train):
      x_temp = x_train[i,:].reshape(1, x_train.shape[1])
      kernel = rbf_kernel(X = x_train, Y = x_temp, gamma = kernel_parameter)

      temp = np.dot(np.transpose(alpha), kernel) + ini_b 

      result[i] = y_train[i] / (np.exp(y_train[i] * temp) + 1)
    result_sum = np.sum(result, axis = 0)
    alpha = alpha * (1 - 2 * step_size * reg_strength) + (step_size / n_train) * result
    ini_b = result_sum * (step_size / n_train) + ini_b


  n_test = x_test.shape[0]
  y_test = y_test.reshape(n_test,1)
  accuracy = 0

  for i in range(n_test):
    x_temp = x_test[i, :].reshape(1, -1)
    temp_ker = rbf_kernel(X = x_train, Y = x_temp, gamma = kernel_parameter)
    y_pred = ini_b + np.dot(np.transpose(alpha), temp_ker)
    temp = y_test[i] * y_pred
    if temp > 0:
      accuracy = accuracy + 1

  acc_rate = accuracy / n_test
  return acc_rate

x_train = np.load("x_train.npy") # shape (n_train, d)
x_test = np.load("x_test.npy") # shape (n_test, d)

y_train = np.load("y_train.npy") # shape (n_train,)
y_test = np.load("y_test.npy")  # shape (n_test,)


linear_acc = linear_logistic_regression(x_train, y_train, x_test, y_test, 1.0, 0.001, 200)
print("Linear LR accuracy:", linear_acc)

klr_acc = kernel_logistic_regression(x_train, y_train, x_test, y_test, 5.0, 0.001, 200, 0.1)
print("Kernel LR accuracy:", klr_acc)

